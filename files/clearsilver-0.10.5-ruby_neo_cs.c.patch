--- ruby/ext/hdf/neo_cs.c.orig	2011-10-30 23:01:44.890000000 +0200
+++ ruby/ext/hdf/neo_cs.c	2011-10-30 23:01:56.020000000 +0200
@@ -7,6 +7,8 @@
  * This code is made available under the terms of the ClearSilver License.
  * http://www.clearsilver.net/license.hdf
  *
+ * Copyright 2011 Anthony Durity
+ *
  */
 
 #include <ruby.h>
@@ -16,11 +18,20 @@
 static VALUE cCs;
 extern VALUE mNeotonic;
 extern VALUE eHdfError;
+static VALUE eCsError;
 
 VALUE r_neo_error(NEOERR *err);
 
 #define Srb_raise(val) rb_raise(eHdfError, "%s/%d %s",__FILE__,__LINE__,RSTRING(val)->ptr)
 
+#define CS_UNDECIDED -1
+#define CS_TRADITIONAL 1
+#define CS_REVAMPED 2
+
+int which_cs = CS_UNDECIDED;
+
+static HDF *tmp_hdf;
+
 static void c_free (CSPARSE *csd) {
   if (csd) {
     cs_destroy (&csd);
@@ -31,14 +42,16 @@
   return self;
 }
 
-VALUE c_new (VALUE class, VALUE oHdf) {
+VALUE c_create_with (VALUE class, VALUE oHdf) {
   CSPARSE *cs = NULL;
   NEOERR *err;
   t_hdfh *hdfh;
   VALUE r_cs;
 
-  Data_Get_Struct(oHdf, t_hdfh, hdfh);
+  if (which_cs == CS_REVAMPED) rb_raise(eCsError, "already created using the revamped way");
 
+  Data_Get_Struct(oHdf, t_hdfh, hdfh);
+	
   if (hdfh == NULL) rb_raise(eHdfError, "must include an Hdf object");
 
   err = cs_init (&cs, hdfh->hdf);
@@ -48,15 +61,107 @@
 
   r_cs = Data_Wrap_Struct(class, 0, c_free, cs);
   rb_obj_call_init(r_cs, 0, NULL);
+  which_cs = CS_TRADITIONAL;
   return r_cs;
 }
 
+VALUE c_create (VALUE class) {
+  CSPARSE **data;
+  CSPARSE *cs = NULL;
+  NEOERR *err;
+  VALUE r_cs;
+	
+  if (which_cs == CS_TRADITIONAL) rb_raise(eCsError, "already created using the traditional way");
+		
+  r_cs = Data_Make_Struct(class, CSPARSE*, 0, free, data);
+  rb_obj_call_init(r_cs, 0, NULL);
+  which_cs = CS_REVAMPED;
+  return r_cs;
+}
+
+VALUE c_internal_use (VALUE self, VALUE oHdf) {
+  CSPARSE **data;
+  CSPARSE *cs = NULL;
+  NEOERR *err;
+  t_hdfh *hdfh;
+	
+  if (which_cs != CS_REVAMPED) rb_raise(eCsError, "API mismatch");
+	
+  Data_Get_Struct(oHdf, t_hdfh, hdfh);
+  if (hdfh == NULL) rb_raise(eHdfError, "must include an Hdf object");
+	
+  if (tmp_hdf) {
+    hdf_destroy(&tmp_hdf);
+    tmp_hdf = NULL;
+  }
+  err = hdf_init(&tmp_hdf);
+  if (err) Srb_raise(r_neo_error(err));
+  err = hdf_copy (tmp_hdf, "", hdfh->hdf);
+  if (err) Srb_raise(r_neo_error(err));
+  err = cs_init (&cs, tmp_hdf);
+  if (err) Srb_raise(r_neo_error(err));
+  err = cgi_register_strfuncs(cs);
+  if (err) Srb_raise(r_neo_error(err));
+	
+  Data_Get_Struct(self, CSPARSE*, data);
+  if (data) {
+    if (*data) {
+      cs_destroy(data);
+      *data = NULL;
+    } else {
+    }
+
+  } else {
+    rb_raise(eCsError, "Seriouly like, what the fuck?!");
+  }
+  
+  *data = cs;
+
+  return self;
+}
+
+static VALUE recv;
+static VALUE method;
+
+NEOERR* c_fileload(void *ctx, HDF *hdf, const char *filename, char **contents) {
+  int mid = rb_to_id(method);
+  VALUE ret = rb_funcall(recv, mid, 2, rb_str_new2(filename), ctx);
+  char *str = strdup(StringValuePtr(ret)); 
+  *contents = str;
+  return NULL;
+}
+
+static VALUE c_register_fileload(VALUE self, VALUE obj, VALUE symbol, VALUE arr) {
+  CSPARSE **data;
+  CSPARSE *cs = NULL;
+    
+  if (which_cs == CS_REVAMPED) {
+    Data_Get_Struct(self, CSPARSE*, data);
+	cs = *data;
+  } else {
+    Data_Get_Struct(self, CSPARSE, cs);
+  }
+
+  if (rb_type(symbol) != T_SYMBOL) rb_raise( rb_eTypeError, "expected an ol' symbol i did");
+  cs_register_fileload(cs, arr, c_fileload);
+  recv = obj;
+  method = symbol;
+
+  return self;
+}
+
 static VALUE c_parse_file (VALUE self, VALUE oPath) {
+  CSPARSE **data;
   CSPARSE *cs = NULL;
   NEOERR *err;
   char *path;
 
-  Data_Get_Struct(self, CSPARSE, cs);
+  if (which_cs == CS_REVAMPED) {
+    Data_Get_Struct(self, CSPARSE*, data);
+	cs = *data;
+  } else {
+    Data_Get_Struct(self, CSPARSE, cs);
+  }
   path = STR2CSTR(oPath);
 
   err = cs_parse_file (cs, path);
@@ -67,12 +172,18 @@
 
 static VALUE c_parse_str (VALUE self, VALUE oString)
 {
+  CSPARSE **data;
   CSPARSE *cs = NULL;
   NEOERR *err;
   char *s, *ms;
   long l;
 
-  Data_Get_Struct(self, CSPARSE, cs);
+  if (which_cs == CS_REVAMPED) {
+    Data_Get_Struct(self, CSPARSE*, data);
+    cs = *data;
+  } else {
+    Data_Get_Struct(self, CSPARSE, cs);
+  }
   s = rb_str2cstr(oString, &l);
 
   /* This should be changed to use memory from the gc */
@@ -80,7 +191,6 @@
   if (ms == NULL) rb_raise(rb_eNoMemError, "out of memory");
 
   err = cs_parse_string (cs, ms, (size_t)l);
-
   if (err) Srb_raise(r_neo_error(err));
 
   return self;
@@ -93,16 +203,30 @@
   return nerr_pass(string_append(str, buf));
 }
 
-static VALUE c_render (VALUE self)
+/* Get setlocale() declaration.  */
+#include <locale.h>
+/* Get gettext(), textdomain(), bindtextdomain() declaration.  */
+#include <libintl.h>
+
+static VALUE c_render (VALUE self, VALUE domain, VALUE dir, VALUE locale)
 {
+  CSPARSE **data;
   CSPARSE *cs = NULL;
   NEOERR *err;
   STRING str;
   VALUE rv;
 
-  Data_Get_Struct(self, CSPARSE, cs);
-
+  if (which_cs == CS_REVAMPED) {
+    Data_Get_Struct(self, CSPARSE*, data);
+    cs = *data;
+  } else {
+    Data_Get_Struct(self, CSPARSE, cs);
+  }
+	
   string_init(&str);
+  setlocale(LC_ALL, STR2CSTR(locale));
+  bindtextdomain(STR2CSTR(domain), STR2CSTR(dir));
+  textdomain(STR2CSTR(domain));
   err = cs_render (cs, &str, render_cb);
   if (err) Srb_raise(r_neo_error(err));
 
@@ -113,10 +237,15 @@
 
 void Init_cs() {
   cCs = rb_define_class_under(mNeotonic, "Cs", rb_cObject);
-  rb_define_singleton_method(cCs, "new", c_new, 1);
+  rb_define_singleton_method(cCs, "create_with", c_create_with, 1);
+  rb_define_singleton_method(cCs, "create", c_create, 0);
 
+  rb_define_method(cCs, "internal_use", c_internal_use, 1);
   rb_define_method(cCs, "initialize", c_init, 0);
+  rb_define_method(cCs, "register_fileload", c_register_fileload, 3);
   rb_define_method(cCs, "parse_file", c_parse_file, 1);
   rb_define_method(cCs, "parse_string", c_parse_str, 1);
-  rb_define_method(cCs, "render", c_render, 0);
+  rb_define_method(cCs, "render", c_render, 3);
+	
+  eCsError = rb_define_class_under(mNeotonic, "CsError", rb_eStandardError);
 }
